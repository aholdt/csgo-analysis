/* tslint:disable */
/* eslint-disable */
/**
 * Cats example
 * The cats API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface BlindedPlayer
 */
export interface BlindedPlayer {
    /**
     * 
     * @type {number}
     * @memberof BlindedPlayer
     */
    playerId: number;
    /**
     * 
     * @type {number}
     * @memberof BlindedPlayer
     */
    startTick: number;
    /**
     * 
     * @type {number}
     * @memberof BlindedPlayer
     */
    endTick: number;
}
/**
 * 
 * @export
 * @interface BombEvent
 */
export interface BombEvent {
    /**
     * 
     * @type {object}
     * @memberof BombEvent
     */
    type: object;
    /**
     * 
     * @type {number}
     * @memberof BombEvent
     */
    tick: number;
    /**
     * 
     * @type {number}
     * @memberof BombEvent
     */
    userId: number;
    /**
     * 
     * @type {Position}
     * @memberof BombEvent
     */
    position: Position;
}
/**
 * 
 * @export
 * @interface Cat
 */
export interface Cat {
    /**
     * The age of the Cat
     * @type {number}
     * @memberof Cat
     */
    age: number;
    /**
     * The breed of the Cat
     * @type {string}
     * @memberof Cat
     */
    breed: string;
    /**
     * The name of the Cat
     * @type {string}
     * @memberof Cat
     */
    name: string;
}
/**
 * 
 * @export
 * @interface CreateCatDto
 */
export interface CreateCatDto {
    /**
     * 
     * @type {string}
     * @memberof CreateCatDto
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof CreateCatDto
     */
    age: number;
    /**
     * 
     * @type {string}
     * @memberof CreateCatDto
     */
    breed: string;
}
/**
 * 
 * @export
 * @interface Inventory
 */
export interface Inventory {
    /**
     * 
     * @type {Array<string>}
     * @memberof Inventory
     */
    inventory: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof Inventory
     */
    userId: number;
    /**
     * 
     * @type {number}
     * @memberof Inventory
     */
    tick: number;
}
/**
 * 
 * @export
 * @interface Kill
 */
export interface Kill {
    /**
     * 
     * @type {number}
     * @memberof Kill
     */
    tick: number;
    /**
     * 
     * @type {number}
     * @memberof Kill
     */
    killer: number;
    /**
     * 
     * @type {number}
     * @memberof Kill
     */
    assister: number;
    /**
     * 
     * @type {number}
     * @memberof Kill
     */
    victim: number;
    /**
     * 
     * @type {string}
     * @memberof Kill
     */
    weapon: string;
}
/**
 * 
 * @export
 * @interface PlayerHurt
 */
export interface PlayerHurt {
    /**
     * 
     * @type {number}
     * @memberof PlayerHurt
     */
    tick: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerHurt
     */
    targetPlayerId: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerHurt
     */
    healthAfterDamage: number;
}
/**
 * 
 * @export
 * @interface PlayerPosition
 */
export interface PlayerPosition {
    /**
     * 
     * @type {number}
     * @memberof PlayerPosition
     */
    playerId: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerPosition
     */
    yaw: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerPosition
     */
    tick: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerPosition
     */
    x: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerPosition
     */
    y: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerPosition
     */
    z: number;
}
/**
 * 
 * @export
 * @interface PlayerShot
 */
export interface PlayerShot {
    /**
     * 
     * @type {number}
     * @memberof PlayerShot
     */
    playerId: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerShot
     */
    yaw: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerShot
     */
    tick: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerShot
     */
    x: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerShot
     */
    y: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerShot
     */
    z: number;
    /**
     * 
     * @type {string}
     * @memberof PlayerShot
     */
    firingWeapon?: string;
}
/**
 * 
 * @export
 * @interface Position
 */
export interface Position {
    /**
     * 
     * @type {number}
     * @memberof Position
     */
    tick: number;
    /**
     * 
     * @type {number}
     * @memberof Position
     */
    x: number;
    /**
     * 
     * @type {number}
     * @memberof Position
     */
    y: number;
    /**
     * 
     * @type {number}
     * @memberof Position
     */
    z: number;
}
/**
 * 
 * @export
 * @interface RoundReplay
 */
export interface RoundReplay {
    /**
     * 
     * @type {number}
     * @memberof RoundReplay
     */
    roundNumber: number;
    /**
     * 
     * @type {number}
     * @memberof RoundReplay
     */
    startTick: number;
    /**
     * 
     * @type {number}
     * @memberof RoundReplay
     */
    endTick: number;
    /**
     * 
     * @type {Array<PlayerPosition>}
     * @memberof RoundReplay
     */
    positions: Array<PlayerPosition>;
    /**
     * 
     * @type {Array<PlayerShot>}
     * @memberof RoundReplay
     */
    playerShot: Array<PlayerShot>;
    /**
     * 
     * @type {Array<PlayerHurt>}
     * @memberof RoundReplay
     */
    playersHurt: Array<PlayerHurt>;
    /**
     * 
     * @type {Array<Utility>}
     * @memberof RoundReplay
     */
    utilities: Array<Utility>;
    /**
     * 
     * @type {Array<Kill>}
     * @memberof RoundReplay
     */
    kills: Array<Kill>;
    /**
     * 
     * @type {Array<Inventory>}
     * @memberof RoundReplay
     */
    inventories: Array<Inventory>;
    /**
     * 
     * @type {Array<BombEvent>}
     * @memberof RoundReplay
     */
    bombEvents: Array<BombEvent>;
}
/**
 * 
 * @export
 * @interface Utility
 */
export interface Utility {
    /**
     * 
     * @type {number}
     * @memberof Utility
     */
    playerId: number;
    /**
     * 
     * @type {object}
     * @memberof Utility
     */
    type: object;
    /**
     * 
     * @type {number}
     * @memberof Utility
     */
    tickThrown: number;
    /**
     * 
     * @type {number}
     * @memberof Utility
     */
    tickDetonated: number;
    /**
     * 
     * @type {number}
     * @memberof Utility
     */
    tickExpired: number;
    /**
     * 
     * @type {Position}
     * @memberof Utility
     */
    throwFrom: Position;
    /**
     * 
     * @type {Position}
     * @memberof Utility
     */
    throwTo: Position;
    /**
     * 
     * @type {Array<string>}
     * @memberof Utility
     */
    damagedPlayerIds: Array<string>;
    /**
     * 
     * @type {Array<BlindedPlayer>}
     * @memberof Utility
     */
    blindedPlayers: Array<BlindedPlayer>;
    /**
     * 
     * @type {Array<Position>}
     * @memberof Utility
     */
    path: Array<Position>;
    /**
     * 
     * @type {number}
     * @memberof Utility
     */
    entityId: number;
}

/**
 * CatsApi - axios parameter creator
 * @export
 */
export const CatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create cat
         * @param {CreateCatDto} createCatDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catsControllerCreate: async (createCatDto: CreateCatDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'createCatDto' is not null or undefined
            assertParamExists('catsControllerCreate', 'createCatDto', createCatDto)
            const localVarPath = `/cats`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCatDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catsControllerFindOne: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('catsControllerFindOne', 'id', id)
            const localVarPath = `/cats/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatsApi - functional programming interface
 * @export
 */
export const CatsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create cat
         * @param {CreateCatDto} createCatDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catsControllerCreate(createCatDto: CreateCatDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cat>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catsControllerCreate(createCatDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catsControllerFindOne(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Cat>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catsControllerFindOne(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatsApi - factory interface
 * @export
 */
export const CatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create cat
         * @param {CreateCatDto} createCatDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catsControllerCreate(createCatDto: CreateCatDto, options?: any): AxiosPromise<Cat> {
            return localVarFp.catsControllerCreate(createCatDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catsControllerFindOne(id: string, options?: any): AxiosPromise<Cat> {
            return localVarFp.catsControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CatsApi - object-oriented interface
 * @export
 * @class CatsApi
 * @extends {BaseAPI}
 */
export class CatsApi extends BaseAPI {
    /**
     * 
     * @summary Create cat
     * @param {CreateCatDto} createCatDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatsApi
     */
    public catsControllerCreate(createCatDto: CreateCatDto, options?: any) {
        return CatsApiFp(this.configuration).catsControllerCreate(createCatDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatsApi
     */
    public catsControllerFindOne(id: string, options?: any) {
        return CatsApiFp(this.configuration).catsControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * FilesApi - axios parameter creator
 * @export
 */
export const FilesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerUploadFile: async (file?: any, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/file`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (file !== undefined) { 
                localVarFormParams.append('file', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FilesApi - functional programming interface
 * @export
 */
export const FilesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = FilesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async filesControllerUploadFile(file?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.filesControllerUploadFile(file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * FilesApi - factory interface
 * @export
 */
export const FilesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = FilesApiFp(configuration)
    return {
        /**
         * 
         * @param {any} [file] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        filesControllerUploadFile(file?: any, options?: any): AxiosPromise<void> {
            return localVarFp.filesControllerUploadFile(file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FilesApi - object-oriented interface
 * @export
 * @class FilesApi
 * @extends {BaseAPI}
 */
export class FilesApi extends BaseAPI {
    /**
     * 
     * @param {any} [file] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FilesApi
     */
    public filesControllerUploadFile(file?: any, options?: any) {
        return FilesApiFp(this.configuration).filesControllerUploadFile(file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RoundreplaysApi - axios parameter creator
 * @export
 */
export const RoundreplaysApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} gameId 
         * @param {number} roundNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundReplaysControllerGetRoundReplay: async (gameId: string, roundNumber: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'gameId' is not null or undefined
            assertParamExists('roundReplaysControllerGetRoundReplay', 'gameId', gameId)
            // verify required parameter 'roundNumber' is not null or undefined
            assertParamExists('roundReplaysControllerGetRoundReplay', 'roundNumber', roundNumber)
            const localVarPath = `/roundreplays/{gameId}/{roundNumber}`
                .replace(`{${"gameId"}}`, encodeURIComponent(String(gameId)))
                .replace(`{${"roundNumber"}}`, encodeURIComponent(String(roundNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RoundreplaysApi - functional programming interface
 * @export
 */
export const RoundreplaysApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RoundreplaysApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} gameId 
         * @param {number} roundNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async roundReplaysControllerGetRoundReplay(gameId: string, roundNumber: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoundReplay>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.roundReplaysControllerGetRoundReplay(gameId, roundNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RoundreplaysApi - factory interface
 * @export
 */
export const RoundreplaysApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RoundreplaysApiFp(configuration)
    return {
        /**
         * 
         * @param {string} gameId 
         * @param {number} roundNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        roundReplaysControllerGetRoundReplay(gameId: string, roundNumber: number, options?: any): AxiosPromise<RoundReplay> {
            return localVarFp.roundReplaysControllerGetRoundReplay(gameId, roundNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RoundreplaysApi - object-oriented interface
 * @export
 * @class RoundreplaysApi
 * @extends {BaseAPI}
 */
export class RoundreplaysApi extends BaseAPI {
    /**
     * 
     * @param {string} gameId 
     * @param {number} roundNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RoundreplaysApi
     */
    public roundReplaysControllerGetRoundReplay(gameId: string, roundNumber: number, options?: any) {
        return RoundreplaysApiFp(this.configuration).roundReplaysControllerGetRoundReplay(gameId, roundNumber, options).then((request) => request(this.axios, this.basePath));
    }
}


